generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum TypeInteraction {
  LIKE
  DISLIKE
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         Role     @default(MEMBER)
  createdAt    DateTime @default(now()) @map("created_at")

  comment          Comment[]
  postHistory      PostHistory[]
  post             Post[]
  PostInteractions PostInteractions[]
  like             Like[]

  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  authorId  String   @default("") @map("author_id")
  title     String
  content   String
  imageUrl  String?  @map("image_url")
  views     Int      @default(0)
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments         Comment[]
  PostHistory      PostHistory[]
  PostInteractions PostInteractions[]
  likesOnPost      Like[]

  @@map("posts")
}

model Like {
  id        String   @id @default(cuid())
  authorId  String   @map("author_id")
  postId    String   @map("post_id")
  like      Boolean  @default(false)
  dislike   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([authorId, postId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  authorId  String   @map("author_id")
  postId    String   @map("post_id")
  content   String
  removed   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PostHistory {
  id       String   @id @default(cuid())
  postId   String   @map("post_id")
  authorId String   @map("author_id")
  title    String
  content  String
  imageUrl String?  @map("image_url")
  views    Int      @default(0)
  likes    Int      @default(0)
  dislikes Int      @default(0)
  editedAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("post_historys")
}

model PostInteractions {
  id        String          @id @default(cuid())
  authorId  String          @map("author_id")
  postId    String          @map("post_id")
  type      TypeInteraction @default(LIKE)
  viewed    Boolean
  likes     Int             @default(0)
  dislikes  Int             @default(0)
  createdAt DateTime        @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, postId])
  @@map("post_interactions")
}
